// ü§ñ OkayCoin Bot - –ü–æ–ª–Ω—ã–π –∫–æ–¥ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
// –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã 24/7 –±–µ–∑ –∑–∞—Å—ã–ø–∞–Ω–∏—è

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');

// ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
const BOT_TOKEN = '7949379153:AAFGbjm6EhWgBV51JT223daOgg7i6alpFdc';
const ADMIN_ID = 5467443715;
const CHANNEL_ID = -1002638030999; // @OkayCryptoChannel
const PORT = process.env.PORT || 5000;

// ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• –í –ü–ê–ú–Ø–¢–ò ==================
let users = new Map();
let tasks = new Map();
let userTasks = new Map();
let referrals = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
function initializeTasks() {
  tasks.set(1, {
    id: 1,
    title: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
    description: "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @OkayCryptoChannel",
    reward: 500,
    icon: "üì¢",
    type: "channel",
    channelId: CHANNEL_ID,
    channelUsername: "OkayCryptoChannel",
    isActive: true
  });

  tasks.set(2, {
    id: 2,
    title: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
    description: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
    reward: 1000,
    icon: "üë•",
    type: "referral",
    target: 5,
    isActive: true
  });

  tasks.set(3, {
    id: 3,
    title: "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
    description: "–ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É",
    reward: 100,
    icon: "üéÅ",
    type: "daily",
    isActive: true
  });
}

// ================== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ==================
function getUser(telegramId) {
  return users.get(telegramId);
}

function createUser(telegramId, username, firstName) {
  const user = {
    id: telegramId,
    username: username || '',
    firstName: firstName || '',
    coins: 0,
    level: 1,
    dailyTaps: 0,
    lastTapDate: new Date().toDateString(),
    lastDailyReward: null,
    language: 'ru',
    completedTasks: [],
    referrerId: null,
    referralCount: 0,
    joinedAt: new Date()
  };
  users.set(telegramId, user);
  return user;
}

function updateUser(telegramId, updates) {
  const user = users.get(telegramId);
  if (user) {
    Object.assign(user, updates);
    users.set(telegramId, user);
  }
  return user;
}

function getReferralCount(userId) {
  let count = 0;
  for (let [, ref] of referrals) {
    if (ref.referrerId === userId) count++;
  }
  return count;
}

// ================== –ü–ï–†–ï–í–û–î–´ ==================
const translations = {
  ru: {
    welcome: "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OkayCoin!\n\nü™ô –¢–∞–ø–∞–π—Ç–µ –º–æ–Ω–µ—Ç—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ OK!\nüí∞ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\nüèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ!",
    mainMenu: "üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    tapButton: "ü™ô –¢–∞–ø–Ω—É—Ç—å",
    tasksButton: "üìã –ó–∞–¥–∞–Ω–∏—è",
    statsButton: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    leaderboardButton: "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥",
    referralsButton: "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã",
    shareButton: "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
    backButton: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    tapLimit: "üö´ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Ç–∞–ø–æ–≤ (50/50)!\n‚è∞ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ —Ç–∞–ø–∞–º–∏!",
    earnedCoins: "üí∞ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {amount} OK!\n\nü™ô –í—Å–µ–≥–æ: {total} OK\n‚ö° –¢–∞–ø–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {taps}/50",
    noTasks: "‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!",
    taskCompleted: "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {reward} OK!",
    subscribeFirst: "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!",
    alreadyCompleted: "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
    claimDaily: "üéÅ –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É",
    dailyClaimed: "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!\nüí∞ +{reward} OK",
    dailyAlready: "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!",
    stats: "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüí∞ –ú–æ–Ω–µ—Ç—ã: {coins} OK\nüèÖ –£—Ä–æ–≤–µ–Ω—å: {level}\n‚ö° –¢–∞–ø–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {taps}/50\nüë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {joinDate}"
  },
  en: {
    welcome: "üéâ Welcome to OkayCoin!\n\nü™ô Tap the coin and earn OK!\nüí∞ Invite friends and get bonuses!\nüèÜ Compete in the leaderboard!",
    mainMenu: "üéÆ Main Menu",
    tapButton: "ü™ô Tap",
    tasksButton: "üìã Tasks",
    statsButton: "üìä Statistics",
    leaderboardButton: "üèÜ Leaderboard",
    referralsButton: "üë• Referrals",
    shareButton: "üì§ Share",
    backButton: "‚¨ÖÔ∏è Back",
    tapLimit: "üö´ You've reached the daily tap limit (50/50)!\n‚è∞ Come back tomorrow for new taps!",
    earnedCoins: "üí∞ You earned {amount} OK!\n\nü™ô Total: {total} OK\n‚ö° Taps today: {taps}/50",
    noTasks: "‚úÖ All tasks completed!",
    taskCompleted: "‚úÖ Task completed! Received {reward} OK!",
    subscribeFirst: "‚ùå Subscribe to the channel first!",
    alreadyCompleted: "‚úÖ Task already completed!",
    claimDaily: "üéÅ Claim Reward",
    dailyClaimed: "üéÅ Daily reward claimed!\nüí∞ +{reward} OK",
    dailyAlready: "‚è∞ Daily reward already claimed today!",
    stats: "üìä Your Statistics:\n\nüí∞ Coins: {coins} OK\nüèÖ Level: {level}\n‚ö° Taps today: {taps}/50\nüë• Referrals: {referrals}\nüìÖ Join Date: {joinDate}"
  }
};

function t(key, lang = 'ru', params = {}) {
  let text = translations[lang]?.[key] || translations['ru'][key] || key;
  Object.keys(params).forEach(param => {
    text = text.replace(`{${param}}`, params[param]);
  });
  return text;
}

// ================== TELEGRAM BOT ==================
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start(.*)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  const param = match[1]?.trim();
  
  let user = getUser(telegramId);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
  if (param && param.startsWith(' ref')) {
    const referrerId = parseInt(param.replace(' ref', ''));
    if (referrerId && referrerId !== telegramId && !user) {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
      user = createUser(telegramId, msg.from.username, msg.from.first_name);
      user.referrerId = referrerId;
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
      const referralId = Date.now();
      referrals.set(referralId, {
        id: referralId,
        referrerId: referrerId,
        referredId: telegramId,
        createdAt: new Date()
      });
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
      const referrer = getUser(referrerId);
      if (referrer) {
        referrer.referralCount = getReferralCount(referrerId);
        updateUser(referrerId, referrer);
      }
      
      console.log(`üë• NEW REFERRAL: ${telegramId} invited by ${referrerId}`);
    }
  }
  
  if (!user) {
    user = createUser(telegramId, msg.from.username, msg.from.first_name);
  }
  
  await showMainMenu(chatId, user);
});

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(chatId, user, messageId = null) {
  const lang = user.language;
  
  const keyboard = {
    inline_keyboard: [
      [{ text: t('tapButton', lang), callback_data: 'tap' }],
      [
        { text: t('tasksButton', lang), callback_data: 'tasks' },
        { text: t('statsButton', lang), callback_data: 'stats' }
      ],
      [
        { text: t('leaderboardButton', lang), callback_data: 'leaderboard' },
        { text: t('referralsButton', lang), callback_data: 'referrals' }
      ],
      [{ text: t('shareButton', lang), callback_data: 'share' }]
    ]
  };
  
  const text = `${t('welcome', lang)}\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins.toLocaleString()} OK\nüèÖ –£—Ä–æ–≤–µ–Ω—å: ${user.level}`;
  
  if (messageId) {
    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: keyboard
    });
  } else {
    await bot.sendMessage(chatId, text, { reply_markup: keyboard });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–ø–æ–≤
async function handleTap(chatId, messageId, user) {
  const today = new Date().toDateString();
  
  if (user.lastTapDate !== today) {
    user.dailyTaps = 0;
    user.lastTapDate = today;
  }
  
  if (user.dailyTaps >= 50) {
    await bot.answerCallbackQuery(chatId, { text: t('tapLimit', user.language) });
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º 10 –º–æ–Ω–µ—Ç –∑–∞ —Ç–∞–ø
  user.coins += 10;
  user.dailyTaps += 1;
  
  // –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞–∂–¥—ã–µ 1000 –º–æ–Ω–µ—Ç
  const newLevel = Math.floor(user.coins / 1000) + 1;
  if (newLevel > user.level) {
    user.level = newLevel;
  }
  
  updateUser(user.id, user);
  
  console.log(`üí∞ TAP: User ${user.id} earned 10 OK, total: ${user.coins}, taps: ${user.dailyTaps}`);
  
  await showMainMenu(chatId, user, messageId);
  await bot.answerCallbackQuery(chatId, { 
    text: t('earnedCoins', user.language, { 
      amount: 10, 
      total: user.coins.toLocaleString(), 
      taps: user.dailyTaps 
    }) 
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è
async function showTasks(chatId, messageId, user) {
  const lang = user.language;
  const availableTasks = [];
  
  for (let [, task] of tasks) {
    if (task.isActive && !user.completedTasks.includes(task.id)) {
      availableTasks.push(task);
    }
  }
  
  if (availableTasks.length === 0) {
    const keyboard = {
      inline_keyboard: [
        [{ text: t('backButton', lang), callback_data: 'back' }]
      ]
    };
    
    await bot.editMessageText(t('noTasks', lang), {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: keyboard
    });
    return;
  }
  
  const keyboard = {
    inline_keyboard: [
      ...availableTasks.map(task => [
        { text: `${task.icon} ${task.title} - ${task.reward} OK`, callback_data: `task_${task.id}` }
      ]),
      [{ text: t('backButton', lang), callback_data: 'back' }]
    ]
  };
  
  await bot.editMessageText(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n${availableTasks.map(task => 
    `${task.icon} ${task.title}\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} OK\nüìù ${task.description}`
  ).join('\n\n')}`, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: keyboard
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
async function completeTask(chatId, messageId, user, taskId) {
  const task = tasks.get(taskId);
  if (!task || user.completedTasks.includes(taskId)) {
    await bot.answerCallbackQuery(chatId, { text: t('alreadyCompleted', user.language) });
    return;
  }
  
  let canComplete = false;
  
  if (task.type === 'channel') {
    try {
      const member = await bot.getChatMember(task.channelId, user.id);
      canComplete = ['member', 'administrator', 'creator'].includes(member.status);
    } catch (error) {
      canComplete = false;
    }
  } else if (task.type === 'referral') {
    const referralCount = getReferralCount(user.id);
    canComplete = referralCount >= task.target;
  } else if (task.type === 'daily') {
    const today = new Date().toDateString();
    canComplete = user.lastDailyReward !== today;
    if (canComplete) {
      user.lastDailyReward = today;
    }
  }
  
  if (!canComplete) {
    let errorText = t('subscribeFirst', user.language);
    if (task.type === 'referral') {
      errorText = `‚ùå –ù—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å ${task.target} –¥—Ä—É–∑–µ–π. –£ –≤–∞—Å: ${getReferralCount(user.id)}`;
    } else if (task.type === 'daily') {
      errorText = t('dailyAlready', user.language);
    }
    await bot.answerCallbackQuery(chatId, { text: errorText });
    return;
  }
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
  user.coins += task.reward;
  user.completedTasks.push(taskId);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
  const newLevel = Math.floor(user.coins / 1000) + 1;
  if (newLevel > user.level) {
    user.level = newLevel;
  }
  
  updateUser(user.id, user);
  
  console.log(`‚úÖ TASK COMPLETED: User ${user.id} completed task ${taskId}, earned ${task.reward} OK`);
  
  await showTasks(chatId, messageId, user);
  await bot.answerCallbackQuery(chatId, { 
    text: t('taskCompleted', user.language, { reward: task.reward }) 
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
async function showStats(chatId, messageId, user) {
  const lang = user.language;
  const referralCount = getReferralCount(user.id);
  const joinDate = user.joinedAt.toLocaleDateString('ru-RU');
  
  const keyboard = {
    inline_keyboard: [
      [{ text: t('backButton', lang), callback_data: 'back' }]
    ]
  };
  
  await bot.editMessageText(t('stats', lang, {
    coins: user.coins.toLocaleString(),
    level: user.level,
    taps: user.dailyTaps,
    referrals: referralCount,
    joinDate: joinDate
  }), {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: keyboard
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥
async function showLeaderboard(chatId, messageId, user) {
  const lang = user.language;
  const sortedUsers = Array.from(users.values())
    .sort((a, b) => b.coins - a.coins)
    .slice(0, 10);
  
  let text = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n";
  
  sortedUsers.forEach((u, index) => {
    const name = u.firstName || u.username || `User${u.id}`;
    const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : `${index + 1}.`;
    text += `${medal} ${name} - ${u.coins.toLocaleString()} OK\n`;
  });
  
  const keyboard = {
    inline_keyboard: [
      [{ text: t('backButton', lang), callback_data: 'back' }]
    ]
  };
  
  await bot.editMessageText(text, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: keyboard
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã
async function showReferrals(chatId, messageId, user) {
  const lang = user.language;
  const referralCount = getReferralCount(user.id);
  const referralLink = `https://t.me/CryptoOkayBot?start=ref${user.id}`;
  
  let text = `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n\n`;
  text += `üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n${referralLink}\n\n`;
  text += `üë´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${referralCount}\n\n`;
  text += `üí∞ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n`;
  text += `‚Ä¢ 0-99 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 250 OK –∑–∞ –∫–∞–∂–¥–æ–≥–æ\n`;
  text += `‚Ä¢ 100-499 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 125 OK –∑–∞ –∫–∞–∂–¥–æ–≥–æ\n`;
  text += `‚Ä¢ 500+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 75 OK –∑–∞ –∫–∞–∂–¥–æ–≥–æ`;
  
  const keyboard = {
    inline_keyboard: [
      [{ text: "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url: `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent('üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ OkayCoin Bot! –¢–∞–ø–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π OK!')}` }],
      [{ text: t('backButton', lang), callback_data: 'back' }]
    ]
  };
  
  await bot.editMessageText(text, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: keyboard
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;
  const user = getUser(query.from.id);
  
  if (!user) return;
  
  try {
    console.log(`üîÑ CALLBACK: chatId=${chatId}, data="${data}"`);
    
    if (data === 'tap') {
      await handleTap(query.id, messageId, user);
    } else if (data === 'tasks') {
      await showTasks(chatId, messageId, user);
    } else if (data === 'stats') {
      await showStats(chatId, messageId, user);
    } else if (data === 'leaderboard') {
      await showLeaderboard(chatId, messageId, user);
    } else if (data === 'referrals') {
      await showReferrals(chatId, messageId, user);
    } else if (data === 'share') {
      await showReferrals(chatId, messageId, user);
    } else if (data === 'back') {
      await showMainMenu(chatId, user, messageId);
    } else if (data.startsWith('task_')) {
      const taskId = parseInt(data.replace('task_', ''));
      await completeTask(query.id, messageId, user, taskId);
    }
  } catch (error) {
    console.error('‚ùå Callback error:', error);
    try {
      await bot.answerCallbackQuery(query.id, { text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" });
    } catch (e) {}
  }
});

// ================== EXPRESS –°–ï–†–í–ï–† ==================
const app = express();
app.use(express.json());

// –†–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/ping', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    users: users.size,
    uptime: process.uptime()
  });
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy',
    users: users.size,
    tasks: tasks.size,
    memory: process.memoryUsage(),
    uptime: process.uptime()
  });
});

// ================== KEEP-ALIVE –°–ò–°–¢–ï–ú–ê ==================
function startKeepAlive() {
  // –õ–æ–≥–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  setInterval(() => {
    console.log(`üõ°Ô∏è Anti-sleep active | Users: ${users.size} | Memory: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`);
  }, 30000);
  
  // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  setInterval(() => {
    console.log(`üîÑ Activity pulse | ${new Date().toISOString()}`);
  }, 60000);
  
  // Keep-alive –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
  setInterval(() => {
    console.log('‚úÖ Bot keep-alive ping');
  }, 3 * 60 * 1000);
}

// ================== –ó–ê–ü–£–°–ö ==================
function startBot() {
  console.log('ü§ñ Initializing OkayCoin Bot...');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  initializeTasks();
  
  // –ó–∞–ø—É—Å–∫ keep-alive —Å–∏—Å—Ç–µ–º—ã
  startKeepAlive();
  
  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  app.listen(PORT, '0.0.0.0', () => {
    console.log(`üåê Server running on port ${PORT}`);
    console.log('‚úÖ OkayCoin Bot started successfully!');
    console.log(`ü§ñ Bot username: @CryptoOkayBot`);
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason) => {
  console.error('‚ùå Unhandled Rejection:', reason);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot();

// ================== –≠–ö–°–ü–û–†–¢ ==================
module.exports = { bot, app };
